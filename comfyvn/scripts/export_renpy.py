# comfyvn/scripts/export_renpy.py
# Ren'Py Export with Pose/Delta embedding + ATL tween (ComfyVN_Architect)

import os, json
from datetime import datetime

RENPI_OUT = "./exports/renpy"
os.makedirs(RENPI_OUT, exist_ok=True)

RENPI_HEADER = """# Auto-generated by ComfyVN (ComfyVN_Architect)
# File: poses.rpy
init python:
    # pose registry (id -> skeleton)
    pose_registry = {}
"""

ATL_TMPL = """
# ATL tween from {from_pose} -> {to_pose}
transform pose_tween_{from_pose}_{to_pose}(t=1.0):
    # apply externally via Python to compute frame positions if needed
    # This marker exists so creators can hook ATL later.
    linear t
"""


def write_renpy_pose_registry(poses: dict, out_path: str):
    lines = [RENPI_HEADER]
    for pid, pose in poses.items():
        sk = pose.get("skeleton", {})
        lines.append(f"    pose_registry['{pid}'] = {json.dumps(sk)}")
    with open(out_path, "w", encoding="utf-8") as f:
        f.write("\n".join(lines) + "\n")


def export_poses_to_renpy(pose_dir="./data/poses", delta_dir="./data/pose_deltas"):
    poses = {}
    if os.path.isdir(pose_dir):
        for f in os.listdir(pose_dir):
            if f.endswith(".json") and f != "pose_index.json":
                with open(os.path.join(pose_dir, f), "r", encoding="utf-8") as fh:
                    p = json.load(fh)
                    poses[p.get("pose_id", os.path.splitext(f)[0])] = p

    # write registry
    out_rpy = os.path.join(RENPI_OUT, "poses.rpy")
    write_renpy_pose_registry(poses, out_rpy)

    # write ATL stubs for deltas
    if os.path.isdir(delta_dir):
        with open(out_rpy, "a", encoding="utf-8") as f:
            for fdelta in os.listdir(delta_dir):
                if not fdelta.endswith(".json"):
                    continue
                d = json.load(
                    open(os.path.join(delta_dir, fdelta), "r", encoding="utf-8")
                )
                f.write(
                    ATL_TMPL.format(
                        from_pose=d.get("from_pose", "a"), to_pose=d.get("to_pose", "b")
                    )
                )
    print(f"[RenPyExport] âœ… poses.rpy written -> {out_rpy}")


if __name__ == "__main__":
    export_poses_to_renpy()
